# -*- coding: utf-8 -*-
"""Ghaid1201220_Assi5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dC77mY-DqWZ6yAPMkqAFkXJePwbpiI1O

# ü§ç**Ghaid Yahya** ***1201220 - Assi No.5***ü§ç
---

Importing the libraries
"""

import pandas as pd
import numpy as np
from itertools import combinations

"""To read the dataset file"""

myFile = "DataSet/online_retail_II.csv"
df = pd.read_csv(myFile)

"""**Randomly select 200k row from the dataset using your ID as seed.**"""

random200k = df.sample(n=200000, random_state=1201220)

"""I used my id as a seed which is 1201220

**1. Determine the total sales per invoice and identify the top 5 invoices.**
"""

df['TotalSales'] = df['Price'] * df['Quantity']
sales = df.groupby('Invoice')['TotalSales'].sum()
topTrans = sales.nlargest(5)

"""To calculate the total sales per invoice (explination for the output above)

*   we first multiply the price and quantity columns to get the total
*   then Groupe them by invoice, sum the total sales for each invoice
*   lastly Identify the top 5 invoices with the highest total sales



"""

print("The Top 5 Invoices")
print(topTrans)

"""**2. Compute the total sales per customer and list the top 5 customers**"""

df['TotalSales'] = df['Price'] * df['Quantity']
customerTsales = df.groupby('Customer ID')['TotalSales'].sum()
top5Cust = customerTsales.nlargest(5)

"""To calculate the top customer per invoice (explination for the output above)

*   we first multiply the price and quantity columns to calculate the total sales per invoice.
*  then group invoices by customer, and sum the total sales for each customer.
*   lastly Identify the top 5 customers with the highest total sales.










"""

print("The Top 5 Customers")
print(top5Cust)

"""**3. Identify the top 5 selling items during this period.**

"""

df['TotalSales'] = df['Price'] * df['Quantity']

theItems = df.groupby('Description')['Quantity'].sum()

top5itms = theItems.nlargest(5)

print("Top 5 selling items :")
print(top5itms)

"""to calculate the total sales for each item we start by multiplying the price of each item with the quantity sold. afterwords we group the items by their description and calculate the total quantity sold for each item. then its ready to print the top 5 selling items based on the total quantity sold.

**4. Determine the most frequently purchased item pairs by customers and display the top 20 pairs.**
"""

df.dropna(subset=['Invoice', 'Description'], inplace=True)

"""This code drops rows with missing values in the 'Invoice' and 'discription'"""

itemsPerIn = df.groupby('Invoice')['Description'].apply(list)


thePairs = itemsPerIn.apply(lambda items: list(combinations(items, 2))).explode()

pCount = thePairs.value_counts()

top20P = pCount.head(20)

print("Top 20 purchased pairs :")
print(top20P)

"""it converts the lists of purchased items into pairs and counts the occurrence of each item pair. then it identifies the top 20 most frequent item pairs.

**5. The retail store aims to introduce a new promotion targeting items with low sales volume. This promotion entails offering a discounted price for a pair of two different items, with one item being among the top 10 best sellers and the other from the bottom 10 sellers. Customers who purchase these two items together will qualify for the special pricing. Your task is to recommend 10 pairs of items to kickstart this campaign.**
"""

df.dropna(subset=['Description', 'Quantity', 'Price'], inplace=True)

"""to remove rows with missing values in the 'Description' 'Quantity' and 'Price' columns"""

df['TotalSales'] = df['Quantity'] * df['Price']

df = df[~df['Description'].str.contains('Adjustment|Manual|SAMPLE|Bank Charges|bad debt|AMAZON FEE|CRUK Commission')]

DescSales = df.groupby('Description')['TotalSales'].sum()


top10Item = DescSales.nlargest(10)
bottom10Item = DescSales.nsmallest(10)

LSVpairs = []
for topP in top10Item.index:
    bottomP = np.random.choice(bottom10Item.index)
    LSVpairs.append((topP, bottomP))

recommended_pairs = set()
for pair in LSVpairs:
    if len(recommended_pairs) == 10:
        break
    if pair[0] != pair[1]:
        recommended_pairs.add(pair)

print("Recommended pairs for the promotion:")
for idx, pair in enumerate(recommended_pairs, 1):
    print(f"{idx}. {pair[0]} and {pair[1]}")